# Local Variables:
# org-ref-default-bibliography: code.bib
# End:

#+TITLE:         100 days of code with Julia
#+AUTHOR:        Sergio-Feliciano Mendoza-Barrera
#+DRAWERS:       sfmb
#+EMAIL:         s.f.m@ieee.org
#+DATE:          \today
#+DESCRIPTION:   Julia 100 days training
#+KEYWORDS:      R, data science, research, methodology, julia
#+LANGUAGE:      en
#+OPTIONS:       H:10 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t d:HIDDEN
#+OPTIONS:       TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:       LaTeX:dvipng
#+INFOJS_OPT:    view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="dft.css"/>

#+LATEX_CLASS:  tufte-handout
#+LATEX_CLASS_OPTIONS: [letterpaper]
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \defaultfontfeatures{Ligatures=TeX}
#+LATEX_HEADER: \usepackage[small,sf,bf]{titlesec}
#+LATEX_HEADER: \ifx\ifxetex\ifluatex\else % if lua- or xelatex http://tex.stackexchange.com/a/140164/1913
#+LATEX_HEADER:   \newcommand{\textls}[2][5]{%
#+LATEX_HEADER:     \begingroup\addfontfeatures{LetterSpace=#1}#2\endgroup
#+LATEX_HEADER:   }
#+LATEX_HEADER:   \renewcommand{\allcapsspacing}[1]{\textls[15]{#1}}
#+LATEX_HEADER:   \renewcommand{\smallcapsspacing}[1]{\textls[10]{#1}}
#+LATEX_HEADER:   \renewcommand{\allcaps}[1]{\textls[15]{\MakeTextUppercase{#1}}}
#+LATEX_HEADER:   \renewcommand{\smallcaps}[1]{\smallcapsspacing{\scshape\MakeTextLowercase{#1}}}
#+LATEX_HEADER:   \renewcommand{\textsc}[1]{\smallcapsspacing{\textsmallcaps{#1}}}
#+LATEX_HEADER:   \fi

#+LATEX_HEADER: \setmainfont{Adobe Caslon Pro}
#+LATEX_HEADER: \setmonofont{Anonymous Pro}

#+LATEX_HEADER: \usepackage{booktabs} % book-quality tables
#+LATEX_HEADER: \usepackage{units}    % non-stacked fractions and better unit spacing
#+LATEX_HEADER: \usepackage{multicol} % multiple column layout facilities
#+LATEX_HEADER: \usepackage{lipsum}   % filler text
#+LATEX_HEADER: \usepackage{fancyvrb} % extended verbatim environments
#+LATEX_HEADER: \fvset{fontsize=\normalsize}% default font size for fancy-verbatim environments

#+LATEX_HEADER: \newcommand{\doccmd}[1]{\texttt{\textbackslash#1}}% command name -- adds backslash automatically
#+LATEX_HEADER: \newcommand{\docopt}[1]{\ensuremath{\langle}\textrm{\textit{#1}}\ensuremath{\rangle}}% optional command argument
#+LATEX_HEADER: \newcommand{\docarg}[1]{\textrm{\textit{#1}}}% (required) command argument
#+LATEX_HEADER: \newcommand{\docenv}[1]{\textsf{#1}}% environment name
#+LATEX_HEADER: \newcommand{\docpkg}[1]{\texttt{#1}}% package name
#+LATEX_HEADER: \newcommand{\doccls}[1]{\texttt{#1}}% document class name
#+LATEX_HEADER: \newcommand{\docclsopt}[1]{\texttt{#1}}% document class option name
#+LATEX_HEADER: \newenvironment{docspec}{\begin{quote}\noindent}{\end{quote}}% command specification environment

#+LATEX_HEADER: \usepackage{babel}
#+LATEX_HEADER: \usepackage[fixlanguage]{babelbib}
#+LATEX_HEADER: \selectbiblanguage{english}
#+LATEX_HEADER: \usepackage[sort,round]{natbib}
#+LATEX_HEADER: \usepackage[nottoc]{tocbibind}
#+LATEX_HEADER: \usepackage{csquotes}
#+LATEX_HEADER: \usepackage{multirow}
#+STARTUP: entitiespretty

#+LATEX_HEADER: \hypersetup{colorlinks}
#+LATEX_HEADER: \definecolor{sectionColor}{rgb}{0.663,0,0.064} %% red
#+LATEX_HEADER: \definecolor{citeColor}{rgb}{0.753,0.18,0.114} %% orange
#+LATEX_HEADER: \subsectionfont{\color{sectionColor}}
#+LATEX_HEADER: \sectionfont{\color{sectionColor}}
#+LATEX_HEADER: \hypersetup{%
#+LATEX_HEADER:     pdfborder = {0 0 0},
#+LATEX_HEADER:     bookmarksdepth = section,
#+LATEX_HEADER:     citecolor = sectionColor,
#+LATEX_HEADER:     linkcolor = sectionColor,
#+LATEX_HEADER:     urlcolor = citeColor,
#+LATEX_HEADER:   }

#+LATEX_HEADER: \newcommand{\degC}{$^\circ$C{}}
#+LATEX_HEADER: \usepackage{fancyhdr} \pagestyle{fancyplain} \fancyhf{} \renewcommand{\headrulewidth}{0pt} \lhead{\scriptsize{SERGIO-FELICIANO MENDOZA-BARRERA}} \rhead{\scriptsize{PERSONAL RESEARCH $\cdot\ 2020\ \cdot$ GLOBAL LABS $\cdot$ MEXICO}}\fancyfoot[RO, LE]{\thepage}
#+LATEX_HEADER: \newcommand\at[2]{\left.#1\right|_{#2}}
#+LATEX_HEADER: \newcommand\HHI{\mathit{HHI}}
#+LATEX_HEADER: \newcommand\CR{\mathit{CR}}
#+LATEX_HEADER: \definecolor{bg}{rgb}{0.973, 0.973, 0.973}

#+STYLE: <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>
#+ATTR_HTML: width="500px"

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://cdn.globallabs.org/org-html-themes/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://cdn.globallabs.org/org-html-themes/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://cdn.globallabs.org/org-html-themes/styles/bigblow/css/hideshow.css"/>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.globallabs.org/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>

#+TODO: TODO(t) STARTED(s) WAITING(w) REVISION(r) | DONE(d) CANCELED(c)
#+TAGS: problem(p) task(t) objective(o) general(g) specific(s) hypothesis(h) method(m)

#+begin_abstract
The today's topic is metaprogramming basics.
#+end_abstract

* Metaprogramming in Julia. Day 1

Julia code can be represented as a data structure of the language
itself. This allows a program to transform and generate its own code
[[citep:lauwens2020][p. 204]].

** Expressions

Every Julia program starts as a string

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+BEGIN_SRC julia
prog = "1 + 2"
ex = Meta.parse(prog)
#+END_SRC

we can get the type of the variable with ~typeof~ as usual and ~dump~
the tree structure[fn::The ~dump~ function displays ~expr~ objects
with annotations.].

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  typeof(ex)
  dump(ex)
#+end_src

#+RESULTS:
: Expr
: Expr
:   head: Symbol call
:   args: Array{Any}((3,))
:     1: Symbol +
:     2: Int64 1
:     3: Int64 2

\noindent Expressions can be constructed directly by prefixing with ~:~
inside parentheses or using a ~quote~ block

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+BEGIN_SRC julia
ex = quote
    1+2
end
#+END_SRC

Now, /Julia can evaluate an expression object/ using ~eval~

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  eval(ex)
#+end_src

#+RESULTS:
: 3

Every module has its own ~eval~ function that evaluates expressions in
its scope[fn::/WARNING/: When you are using a lot of calls to the
function ~eval~, often this means that something is wrong. ~eval~ is
considered /evil/.].

* Macros. Day 2

\newthought{Macros can include generated code in a program}. A macro
maps a tuple of ~Expr~ objects directly to a compiled expression:

Here is a simple macro

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :results none :exports code
  macro containervariable(container, element)
      return esc(:($(Symbol(container,element)) = $container[$element]))
  end
#+end_src

Macros are called by prefixing their name with the ~@~ (at-sign). The
macro call ~@containervariable letters 1~ is replaced by:

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_example
:(letters1 = letters[1])
#+end_example

~@macroexpand @containervariable letters 1~ returns this expression
which is extremely useful for debugging.

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :results none :exports code
  @macroexpand @containervariable letters 1
#+end_src

This example illustrates how a macro can access the name of its
arguments, something a function canâ€™t do. The return expression needs
to be /escaped/ with ~esc~ because it has to be resolved in the macro
call environment[fn::/Note:/ Why macros? Macros generate and include
fragments of customized code during parse time, thus before the full
program is run.].

** A concrete example

\newthought{A concrete example of the macro usage} is show here
cite:MIT18S191, in this case we are going to use the ~@elapsed~ macro
over the ~peakflops~ function

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  peakflops()
#+end_src

#+RESULTS:
: 5.892558158665142e10

now we can see how long the operation took

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  @elapsed peakflops()
#+end_src

#+RESULTS:
: 0.346514384

Internally, Julia take this piece of code and transform in another
piece of code

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  @macroexpand @elapsed peakflops()
#+end_src

#+RESULTS:
#+begin_example
quote
    #= timing.jl:231 =#
    while false
        #= timing.jl:231 =#
    end
    #= timing.jl:232 =#
    local var"#5#t0" = Base.time_ns()
    #= timing.jl:233 =#
    peakflops()
    #= timing.jl:234 =#
    (Base.time_ns() - var"#5#t0") / 1.0e9
end
#+end_example

the comments indicate the place where Julia inserts extra code for
this specific macro

#+attr_latex: :options framesep=2mm, baselinestretch=1.2, linenos, fontsize=\footnotesize, breaklines=true, bgcolor=bg, style=xcode
#+begin_src julia :session :results output :exports all
  Base.remove_linenums!(@macroexpand @elapsed peakflops())
#+end_src

#+RESULTS:
: quote
:     while false
:     end
:     local var"#7#t0" = Base.time_ns()
:     peakflops()
:     (Base.time_ns() - var"#7#t0") / 1.0e9
: end

bibliographystyle:newapa
bibliography:code.bib
